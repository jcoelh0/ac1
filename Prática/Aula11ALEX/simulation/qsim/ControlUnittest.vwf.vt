// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2017 11:53:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] opcode;
reg reset;
// wires                                               
wire [1:0] ALUOp;
wire ALUSelA;
wire [1:0] ALUSelB;
wire IorD;
wire IRWrite;
wire MemRead;
wire MemtoReg;
wire MemWrite;
wire [1:0] PCSource;
wire PCWrite;
wire PCWriteCond;
wire RegDst;
wire RegWrite;
wire [4:0] State;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp(ALUOp),
	.ALUSelA(ALUSelA),
	.ALUSelB(ALUSelB),
	.clk(clk),
	.IorD(IorD),
	.IRWrite(IRWrite),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.opcode(opcode),
	.PCSource(PCSource),
	.PCWrite(PCWrite),
	.PCWriteCond(PCWriteCond),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.reset(reset),
	.State(State)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(14)
	begin
		clk = 1'b0;
		clk = #35000 1'b1;
		# 35000;
	end
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #40000 1'b0;
end 
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
	opcode[3] = #100000 1'b1;
	opcode[3] = #470000 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b0;
	opcode[2] = #570000 1'b1;
	opcode[2] = #210000 1'b0;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b0;
	opcode[1] = #310000 1'b1;
	opcode[1] = #260000 1'b0;
	opcode[1] = #210000 1'b1;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
end 
endmodule

