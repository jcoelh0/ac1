// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2017 10:32:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Reg32bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Reg32bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] DataIn;
reg writeEn;
// wires                                               
wire [31:0] DataOut;

// assign statements (if any)                          
Reg32bits i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.writeEn(writeEn)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(6)
	begin
		clk = 1'b0;
		clk = #75000 1'b1;
		# 75000;
	end
	clk = 1'b0;
	clk = #75000 1'b1;
end 

// writeEn
initial
begin
	writeEn = 1'b0;
	writeEn = #200000 1'b1;
	writeEn = #220000 1'b0;
	writeEn = #220000 1'b1;
	writeEn = #130000 1'b0;
end 
// DataIn[ 31 ]
initial
begin
	DataIn[31] = 1'b0;
end 
// DataIn[ 30 ]
initial
begin
	DataIn[30] = 1'b0;
end 
// DataIn[ 29 ]
initial
begin
	DataIn[29] = 1'b0;
end 
// DataIn[ 28 ]
initial
begin
	DataIn[28] = 1'b0;
	DataIn[28] = #500000 1'b1;
	DataIn[28] = #280000 1'b0;
end 
// DataIn[ 27 ]
initial
begin
	DataIn[27] = 1'b0;
end 
// DataIn[ 26 ]
initial
begin
	DataIn[26] = 1'b0;
end 
// DataIn[ 25 ]
initial
begin
	DataIn[25] = 1'b0;
end 
// DataIn[ 24 ]
initial
begin
	DataIn[24] = 1'b0;
	DataIn[24] = #500000 1'b1;
	DataIn[24] = #280000 1'b0;
end 
// DataIn[ 23 ]
initial
begin
	DataIn[23] = 1'b0;
end 
// DataIn[ 22 ]
initial
begin
	DataIn[22] = 1'b0;
end 
// DataIn[ 21 ]
initial
begin
	DataIn[21] = 1'b0;
end 
// DataIn[ 20 ]
initial
begin
	DataIn[20] = 1'b0;
	DataIn[20] = #500000 1'b1;
	DataIn[20] = #280000 1'b0;
end 
// DataIn[ 19 ]
initial
begin
	DataIn[19] = 1'b0;
end 
// DataIn[ 18 ]
initial
begin
	DataIn[18] = 1'b0;
end 
// DataIn[ 17 ]
initial
begin
	DataIn[17] = 1'b0;
end 
// DataIn[ 16 ]
initial
begin
	DataIn[16] = 1'b0;
	DataIn[16] = #500000 1'b1;
	DataIn[16] = #280000 1'b0;
end 
// DataIn[ 15 ]
initial
begin
	DataIn[15] = 1'b0;
end 
// DataIn[ 14 ]
initial
begin
	DataIn[14] = 1'b0;
end 
// DataIn[ 13 ]
initial
begin
	DataIn[13] = 1'b0;
end 
// DataIn[ 12 ]
initial
begin
	DataIn[12] = 1'b0;
	DataIn[12] = #500000 1'b1;
	DataIn[12] = #280000 1'b0;
end 
// DataIn[ 11 ]
initial
begin
	DataIn[11] = 1'b0;
end 
// DataIn[ 10 ]
initial
begin
	DataIn[10] = 1'b0;
	DataIn[10] = #40000 1'b1;
	DataIn[10] = #250000 1'b0;
end 
// DataIn[ 9 ]
initial
begin
	DataIn[9] = 1'b0;
end 
// DataIn[ 8 ]
initial
begin
	DataIn[8] = 1'b0;
	DataIn[8] = #40000 1'b1;
	DataIn[8] = #250000 1'b0;
	DataIn[8] = #210000 1'b1;
	DataIn[8] = #280000 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
	DataIn[6] = #40000 1'b1;
	DataIn[6] = #250000 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
	DataIn[4] = #40000 1'b1;
	DataIn[4] = #250000 1'b0;
	DataIn[4] = #210000 1'b1;
	DataIn[4] = #280000 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
	DataIn[2] = #40000 1'b1;
	DataIn[2] = #250000 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
	DataIn[0] = #40000 1'b1;
	DataIn[0] = #250000 1'b0;
	DataIn[0] = #210000 1'b1;
	DataIn[0] = #280000 1'b0;
end 
endmodule

