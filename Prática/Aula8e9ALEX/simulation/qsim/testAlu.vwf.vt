// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2017 18:48:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] DataIn1;
reg [31:0] DataIn2;
reg [2:0] Sel;
// wires                                               
wire [31:0] Result;
wire Zero;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.DataIn1(DataIn1),
	.DataIn2(DataIn2),
	.Result(Result),
	.Sel(Sel),
	.Zero(Zero)
);
initial 
begin 
#1000000 $finish;
end 
// Sel[ 2 ]
initial
begin
	Sel[2] = 1'b0;
	Sel[2] = #340000 1'b1;
	Sel[2] = #330000 1'b0;
end 
// Sel[ 1 ]
initial
begin
	Sel[1] = 1'b0;
	Sel[1] = #160000 1'b1;
	Sel[1] = #180000 1'b0;
	Sel[1] = #170000 1'b1;
	Sel[1] = #160000 1'b0;
end 
// Sel[ 0 ]
initial
begin
	Sel[0] = 1'b0;
	Sel[0] = #70000 1'b1;
	Sel[0] = #90000 1'b0;
	Sel[0] = #90000 1'b1;
	Sel[0] = #90000 1'b0;
	Sel[0] = #90000 1'b1;
	Sel[0] = #80000 1'b0;
	Sel[0] = #70000 1'b1;
	Sel[0] = #90000 1'b0;
end 
// DataIn1[ 31 ]
initial
begin
	DataIn1[31] = 1'b0;
end 
// DataIn1[ 30 ]
initial
begin
	DataIn1[30] = 1'b0;
end 
// DataIn1[ 29 ]
initial
begin
	DataIn1[29] = 1'b0;
end 
// DataIn1[ 28 ]
initial
begin
	DataIn1[28] = 1'b0;
end 
// DataIn1[ 27 ]
initial
begin
	DataIn1[27] = 1'b0;
end 
// DataIn1[ 26 ]
initial
begin
	DataIn1[26] = 1'b0;
end 
// DataIn1[ 25 ]
initial
begin
	DataIn1[25] = 1'b0;
end 
// DataIn1[ 24 ]
initial
begin
	DataIn1[24] = 1'b0;
	DataIn1[24] = #10000 1'b1;
	DataIn1[24] = #660000 1'b0;
end 
// DataIn1[ 23 ]
initial
begin
	DataIn1[23] = 1'b0;
end 
// DataIn1[ 22 ]
initial
begin
	DataIn1[22] = 1'b0;
end 
// DataIn1[ 21 ]
initial
begin
	DataIn1[21] = 1'b0;
	DataIn1[21] = #10000 1'b1;
	DataIn1[21] = #660000 1'b0;
end 
// DataIn1[ 20 ]
initial
begin
	DataIn1[20] = 1'b0;
end 
// DataIn1[ 19 ]
initial
begin
	DataIn1[19] = 1'b0;
end 
// DataIn1[ 18 ]
initial
begin
	DataIn1[18] = 1'b0;
end 
// DataIn1[ 17 ]
initial
begin
	DataIn1[17] = 1'b0;
	DataIn1[17] = #10000 1'b1;
	DataIn1[17] = #660000 1'b0;
end 
// DataIn1[ 16 ]
initial
begin
	DataIn1[16] = 1'b0;
	DataIn1[16] = #10000 1'b1;
	DataIn1[16] = #660000 1'b0;
end 
// DataIn1[ 15 ]
initial
begin
	DataIn1[15] = 1'b0;
end 
// DataIn1[ 14 ]
initial
begin
	DataIn1[14] = 1'b0;
	DataIn1[14] = #10000 1'b1;
	DataIn1[14] = #660000 1'b0;
end 
// DataIn1[ 13 ]
initial
begin
	DataIn1[13] = 1'b0;
end 
// DataIn1[ 12 ]
initial
begin
	DataIn1[12] = 1'b0;
end 
// DataIn1[ 11 ]
initial
begin
	DataIn1[11] = 1'b0;
end 
// DataIn1[ 10 ]
initial
begin
	DataIn1[10] = 1'b0;
	DataIn1[10] = #10000 1'b1;
	DataIn1[10] = #660000 1'b0;
end 
// DataIn1[ 9 ]
initial
begin
	DataIn1[9] = 1'b0;
end 
// DataIn1[ 8 ]
initial
begin
	DataIn1[8] = 1'b0;
	DataIn1[8] = #10000 1'b1;
	DataIn1[8] = #660000 1'b0;
end 
// DataIn1[ 7 ]
initial
begin
	DataIn1[7] = 1'b0;
end 
// DataIn1[ 6 ]
initial
begin
	DataIn1[6] = 1'b0;
	DataIn1[6] = #10000 1'b1;
	DataIn1[6] = #660000 1'b0;
end 
// DataIn1[ 5 ]
initial
begin
	DataIn1[5] = 1'b0;
	DataIn1[5] = #10000 1'b1;
	DataIn1[5] = #660000 1'b0;
end 
// DataIn1[ 4 ]
initial
begin
	DataIn1[4] = 1'b0;
end 
// DataIn1[ 3 ]
initial
begin
	DataIn1[3] = 1'b0;
end 
// DataIn1[ 2 ]
initial
begin
	DataIn1[2] = 1'b0;
	DataIn1[2] = #10000 1'b1;
	DataIn1[2] = #660000 1'b0;
end 
// DataIn1[ 1 ]
initial
begin
	DataIn1[1] = 1'b0;
	DataIn1[1] = #10000 1'b1;
	DataIn1[1] = #660000 1'b0;
end 
// DataIn1[ 0 ]
initial
begin
	DataIn1[0] = 1'b0;
	DataIn1[0] = #10000 1'b1;
	DataIn1[0] = #660000 1'b0;
end 
// DataIn2[ 31 ]
initial
begin
	DataIn2[31] = 1'b0;
end 
// DataIn2[ 30 ]
initial
begin
	DataIn2[30] = 1'b0;
end 
// DataIn2[ 29 ]
initial
begin
	DataIn2[29] = 1'b0;
end 
// DataIn2[ 28 ]
initial
begin
	DataIn2[28] = 1'b0;
end 
// DataIn2[ 27 ]
initial
begin
	DataIn2[27] = 1'b0;
end 
// DataIn2[ 26 ]
initial
begin
	DataIn2[26] = 1'b0;
end 
// DataIn2[ 25 ]
initial
begin
	DataIn2[25] = 1'b0;
end 
// DataIn2[ 24 ]
initial
begin
	DataIn2[24] = 1'b0;
	DataIn2[24] = #10000 1'b1;
	DataIn2[24] = #660000 1'b0;
end 
// DataIn2[ 23 ]
initial
begin
	DataIn2[23] = 1'b0;
end 
// DataIn2[ 22 ]
initial
begin
	DataIn2[22] = 1'b0;
end 
// DataIn2[ 21 ]
initial
begin
	DataIn2[21] = 1'b0;
	DataIn2[21] = #10000 1'b1;
	DataIn2[21] = #660000 1'b0;
end 
// DataIn2[ 20 ]
initial
begin
	DataIn2[20] = 1'b0;
end 
// DataIn2[ 19 ]
initial
begin
	DataIn2[19] = 1'b0;
end 
// DataIn2[ 18 ]
initial
begin
	DataIn2[18] = 1'b0;
end 
// DataIn2[ 17 ]
initial
begin
	DataIn2[17] = 1'b0;
	DataIn2[17] = #10000 1'b1;
	DataIn2[17] = #660000 1'b0;
end 
// DataIn2[ 16 ]
initial
begin
	DataIn2[16] = 1'b0;
	DataIn2[16] = #10000 1'b1;
	DataIn2[16] = #660000 1'b0;
end 
// DataIn2[ 15 ]
initial
begin
	DataIn2[15] = 1'b0;
end 
// DataIn2[ 14 ]
initial
begin
	DataIn2[14] = 1'b0;
	DataIn2[14] = #10000 1'b1;
	DataIn2[14] = #660000 1'b0;
end 
// DataIn2[ 13 ]
initial
begin
	DataIn2[13] = 1'b0;
end 
// DataIn2[ 12 ]
initial
begin
	DataIn2[12] = 1'b0;
end 
// DataIn2[ 11 ]
initial
begin
	DataIn2[11] = 1'b0;
end 
// DataIn2[ 10 ]
initial
begin
	DataIn2[10] = 1'b0;
	DataIn2[10] = #10000 1'b1;
	DataIn2[10] = #660000 1'b0;
end 
// DataIn2[ 9 ]
initial
begin
	DataIn2[9] = 1'b0;
end 
// DataIn2[ 8 ]
initial
begin
	DataIn2[8] = 1'b0;
	DataIn2[8] = #10000 1'b1;
	DataIn2[8] = #660000 1'b0;
end 
// DataIn2[ 7 ]
initial
begin
	DataIn2[7] = 1'b0;
end 
// DataIn2[ 6 ]
initial
begin
	DataIn2[6] = 1'b0;
	DataIn2[6] = #10000 1'b1;
	DataIn2[6] = #660000 1'b0;
end 
// DataIn2[ 5 ]
initial
begin
	DataIn2[5] = 1'b0;
	DataIn2[5] = #10000 1'b1;
	DataIn2[5] = #660000 1'b0;
end 
// DataIn2[ 4 ]
initial
begin
	DataIn2[4] = 1'b0;
end 
// DataIn2[ 3 ]
initial
begin
	DataIn2[3] = 1'b0;
end 
// DataIn2[ 2 ]
initial
begin
	DataIn2[2] = 1'b0;
	DataIn2[2] = #10000 1'b1;
	DataIn2[2] = #660000 1'b0;
end 
// DataIn2[ 1 ]
initial
begin
	DataIn2[1] = 1'b0;
	DataIn2[1] = #10000 1'b1;
	DataIn2[1] = #660000 1'b0;
end 
// DataIn2[ 0 ]
initial
begin
	DataIn2[0] = 1'b0;
	DataIn2[0] = #10000 1'b1;
	DataIn2[0] = #660000 1'b0;
end 
endmodule

