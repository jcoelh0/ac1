// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2017 19:22:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RegFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] readReg1;
reg [4:0] readReg2;
reg [31:0] writeData;
reg writeEnable;
reg [4:0] writeReg;
// wires                                               
wire [31:0] readData1;
wire [31:0] readData2;

// assign statements (if any)                          
RegFile i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.readData1(readData1),
	.readData2(readData2),
	.readReg1(readReg1),
	.readReg2(readReg2),
	.writeData(writeData),
	.writeEnable(writeEnable),
	.writeReg(writeReg)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// readReg1[ 4 ]
initial
begin
	readReg1[4] = 1'b0;
	readReg1[4] = #730000 1'b1;
	readReg1[4] = #90000 1'b0;
end 
// readReg1[ 3 ]
initial
begin
	readReg1[3] = 1'b0;
end 
// readReg1[ 2 ]
initial
begin
	readReg1[2] = 1'b0;
end 
// readReg1[ 1 ]
initial
begin
	readReg1[1] = 1'b0;
	readReg1[1] = #510000 1'b1;
	readReg1[1] = #110000 1'b0;
end 
// readReg1[ 0 ]
initial
begin
	readReg1[0] = 1'b0;
	readReg1[0] = #320000 1'b1;
	readReg1[0] = #90000 1'b0;
end 
// readReg2[ 4 ]
initial
begin
	readReg2[4] = 1'b0;
end 
// readReg2[ 3 ]
initial
begin
	readReg2[3] = 1'b0;
end 
// readReg2[ 2 ]
initial
begin
	readReg2[2] = 1'b0;
	readReg2[2] = #820000 1'b1;
	readReg2[2] = #100000 1'b0;
end 
// readReg2[ 1 ]
initial
begin
	readReg2[1] = 1'b0;
	readReg2[1] = #630000 1'b1;
	readReg2[1] = #100000 1'b0;
end 
// readReg2[ 0 ]
initial
begin
	readReg2[0] = 1'b0;
	readReg2[0] = #410000 1'b1;
	readReg2[0] = #100000 1'b0;
end 
// writeData[ 31 ]
initial
begin
	writeData[31] = 1'b0;
end 
// writeData[ 30 ]
initial
begin
	writeData[30] = 1'b0;
end 
// writeData[ 29 ]
initial
begin
	writeData[29] = 1'b0;
end 
// writeData[ 28 ]
initial
begin
	writeData[28] = 1'b0;
end 
// writeData[ 27 ]
initial
begin
	writeData[27] = 1'b0;
end 
// writeData[ 26 ]
initial
begin
	writeData[26] = 1'b0;
end 
// writeData[ 25 ]
initial
begin
	writeData[25] = 1'b0;
	writeData[25] = #160000 1'b1;
	writeData[25] = #80000 1'b0;
end 
// writeData[ 24 ]
initial
begin
	writeData[24] = 1'b0;
	writeData[24] = #80000 1'b1;
	writeData[24] = #80000 1'b0;
	writeData[24] = #340000 1'b1;
	writeData[24] = #120000 1'b0;
	writeData[24] = #100000 1'b1;
	writeData[24] = #190000 1'b0;
end 
// writeData[ 23 ]
initial
begin
	writeData[23] = 1'b0;
	writeData[23] = #10000 1'b1;
	writeData[23] = #70000 1'b0;
	writeData[23] = #160000 1'b1;
	writeData[23] = #70000 1'b0;
end 
// writeData[ 22 ]
initial
begin
	writeData[22] = 1'b0;
	writeData[22] = #160000 1'b1;
	writeData[22] = #80000 1'b0;
end 
// writeData[ 21 ]
initial
begin
	writeData[21] = 1'b0;
	writeData[21] = #10000 1'b1;
	writeData[21] = #150000 1'b0;
	writeData[21] = #80000 1'b1;
	writeData[21] = #70000 1'b0;
	writeData[21] = #190000 1'b1;
	writeData[21] = #120000 1'b0;
end 
// writeData[ 20 ]
initial
begin
	writeData[20] = 1'b0;
end 
// writeData[ 19 ]
initial
begin
	writeData[19] = 1'b0;
	writeData[19] = #10000 1'b1;
	writeData[19] = #70000 1'b0;
	writeData[19] = #160000 1'b1;
	writeData[19] = #70000 1'b0;
end 
// writeData[ 18 ]
initial
begin
	writeData[18] = 1'b0;
	writeData[18] = #160000 1'b1;
	writeData[18] = #150000 1'b0;
end 
// writeData[ 17 ]
initial
begin
	writeData[17] = 1'b0;
	writeData[17] = #10000 1'b1;
	writeData[17] = #230000 1'b0;
	writeData[17] = #260000 1'b1;
	writeData[17] = #120000 1'b0;
end 
// writeData[ 16 ]
initial
begin
	writeData[16] = 1'b0;
	writeData[16] = #10000 1'b1;
	writeData[16] = #150000 1'b0;
	writeData[16] = #340000 1'b1;
	writeData[16] = #120000 1'b0;
	writeData[16] = #100000 1'b1;
	writeData[16] = #190000 1'b0;
end 
// writeData[ 15 ]
initial
begin
	writeData[15] = 1'b0;
	writeData[15] = #10000 1'b1;
	writeData[15] = #70000 1'b0;
	writeData[15] = #80000 1'b1;
	writeData[15] = #150000 1'b0;
end 
// writeData[ 14 ]
initial
begin
	writeData[14] = 1'b0;
	writeData[14] = #10000 1'b1;
	writeData[14] = #150000 1'b0;
	writeData[14] = #80000 1'b1;
	writeData[14] = #70000 1'b0;
	writeData[14] = #190000 1'b1;
	writeData[14] = #120000 1'b0;
end 
// writeData[ 13 ]
initial
begin
	writeData[13] = 1'b0;
	writeData[13] = #240000 1'b1;
	writeData[13] = #70000 1'b0;
end 
// writeData[ 12 ]
initial
begin
	writeData[12] = 1'b0;
end 
// writeData[ 11 ]
initial
begin
	writeData[11] = 1'b0;
	writeData[11] = #10000 1'b1;
	writeData[11] = #70000 1'b0;
	writeData[11] = #160000 1'b1;
	writeData[11] = #70000 1'b0;
end 
// writeData[ 10 ]
initial
begin
	writeData[10] = 1'b0;
	writeData[10] = #10000 1'b1;
	writeData[10] = #150000 1'b0;
	writeData[10] = #340000 1'b1;
	writeData[10] = #120000 1'b0;
end 
// writeData[ 9 ]
initial
begin
	writeData[9] = 1'b0;
	writeData[9] = #240000 1'b1;
	writeData[9] = #70000 1'b0;
end 
// writeData[ 8 ]
initial
begin
	writeData[8] = 1'b0;
	writeData[8] = #10000 1'b1;
	writeData[8] = #300000 1'b0;
	writeData[8] = #190000 1'b1;
	writeData[8] = #120000 1'b0;
	writeData[8] = #100000 1'b1;
	writeData[8] = #190000 1'b0;
end 
// writeData[ 7 ]
initial
begin
	writeData[7] = 1'b0;
	writeData[7] = #10000 1'b1;
	writeData[7] = #70000 1'b0;
	writeData[7] = #160000 1'b1;
	writeData[7] = #70000 1'b0;
end 
// writeData[ 6 ]
initial
begin
	writeData[6] = 1'b0;
	writeData[6] = #10000 1'b1;
	writeData[6] = #150000 1'b0;
	writeData[6] = #80000 1'b1;
	writeData[6] = #70000 1'b0;
	writeData[6] = #190000 1'b1;
	writeData[6] = #120000 1'b0;
end 
// writeData[ 5 ]
initial
begin
	writeData[5] = 1'b0;
	writeData[5] = #10000 1'b1;
	writeData[5] = #230000 1'b0;
	writeData[5] = #260000 1'b1;
	writeData[5] = #120000 1'b0;
end 
// writeData[ 4 ]
initial
begin
	writeData[4] = 1'b0;
	writeData[4] = #160000 1'b1;
	writeData[4] = #150000 1'b0;
end 
// writeData[ 3 ]
initial
begin
	writeData[3] = 1'b0;
	writeData[3] = #10000 1'b1;
	writeData[3] = #70000 1'b0;
	writeData[3] = #160000 1'b1;
	writeData[3] = #70000 1'b0;
end 
// writeData[ 2 ]
initial
begin
	writeData[2] = 1'b0;
	writeData[2] = #10000 1'b1;
	writeData[2] = #300000 1'b0;
	writeData[2] = #190000 1'b1;
	writeData[2] = #120000 1'b0;
end 
// writeData[ 1 ]
initial
begin
	writeData[1] = 1'b0;
	writeData[1] = #10000 1'b1;
	writeData[1] = #150000 1'b0;
	writeData[1] = #80000 1'b1;
	writeData[1] = #70000 1'b0;
	writeData[1] = #190000 1'b1;
	writeData[1] = #120000 1'b0;
end 
// writeData[ 0 ]
initial
begin
	writeData[0] = 1'b0;
	writeData[0] = #10000 1'b1;
	writeData[0] = #300000 1'b0;
	writeData[0] = #190000 1'b1;
	writeData[0] = #120000 1'b0;
	writeData[0] = #100000 1'b1;
	writeData[0] = #190000 1'b0;
end 

// writeEnable
initial
begin
	writeEnable = 1'b0;
	writeEnable = #10000 1'b1;
	writeEnable = #280000 1'b0;
end 
// writeReg[ 4 ]
initial
begin
	writeReg[4] = 1'b0;
	writeReg[4] = #500000 1'b1;
	writeReg[4] = #120000 1'b0;
end 
// writeReg[ 3 ]
initial
begin
	writeReg[3] = 1'b0;
	writeReg[3] = #240000 1'b1;
	writeReg[3] = #70000 1'b0;
end 
// writeReg[ 2 ]
initial
begin
	writeReg[2] = 1'b0;
	writeReg[2] = #160000 1'b1;
	writeReg[2] = #80000 1'b0;
end 
// writeReg[ 1 ]
initial
begin
	writeReg[1] = 1'b0;
	writeReg[1] = #80000 1'b1;
	writeReg[1] = #80000 1'b0;
end 
// writeReg[ 0 ]
initial
begin
	writeReg[0] = 1'b0;
	writeReg[0] = #10000 1'b1;
	writeReg[0] = #70000 1'b0;
end 
endmodule

