library ieee;
use ieee.std_logic_1164.all;
library work;
use work.MIPS_pkg.all;
use work.DisplayUnit_pkg.all;

entity mips_single_cycle is
port( CLOCK_50 : in std_logic;
		SW   		: in  std_logic_vector(2 downto 0);
		KEY  		: in  std_logic_vector(3 downto 0);
		HEX0 		: out std_logic_vector(6 downto 0);
		HEX7 		: out std_logic_vector(6 downto 0) );
end mips_single_cycle;

architecture Structural of mips_single_cycle is
	signal s_clk : std_logic;
begin
-- Debouncer
debnc: entity work.DebounceUnit(Behavioral)
 generic map(mSecMinInWidth => 200,
				 inPolarity => '0',
				 outPolarity => '1')
 port map( refClk    => CLOCK_50,
			  dirtyIn   => KEY(0),
			  pulsedOut => s_clk); 
			  
-- Display module
displ: entity work.DisplayUnit(Behavioral)
generic map(dataPathType => SINGLE_CYCLE_DP,
				IM_ADDR_SIZE => ROM_ADDR_SIZE,
				DM_ADDR_SIZE => RAM_ADDR_SIZE)
port map( RefClk   => CLOCK_50,
			 InputSel => SW(1 downto 0),
			 DispMode => SW(2),
			 NextAddr => KEY(3),
			 Dir => KEY(2),
			 disp0 => HEX0,
 (...)
			 disp7 => HEX7);
end Structural;